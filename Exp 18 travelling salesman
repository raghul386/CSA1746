import itertools
def tsp(graph, start=0):
    n = len(graph)
    cities = list(range(n))
    min_path = None
    min_cost = float('inf')
    for perm in itertools.permutations([i for i in cities if i != start]):
        cost = graph[start][perm[0]] + sum(graph[perm[i]][perm[i+1]] for i in range(len(perm)-1)) + graph[perm[-1]][start]
        if cost < min_cost:
            min_cost = cost
            min_path = (start,) + perm + (start,)
    
    print("Shortest Path:", min_path)
    print("Minimum Cost:", min_cost)
# Example graph (Adjacency matrix)
graph = [
    [0, 10, 15, 20],
    [10, 0, 35, 25],
    [15, 35, 0, 30],
    [20, 25, 30, 0]
]
tsp(graph)
